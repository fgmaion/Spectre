import matplotlib.pylab        as plt
import matplotlib.pyplot
from   matplotlib.font_manager import FontProperties
from   matplotlib.ticker       import ScalarFormatter
from   matplotlib.ticker       import FixedFormatter
import pylab                   as pl
import numpy                   as np
import math, os
import glob, pickle

formatter = ScalarFormatter(useMathText=True)
#formatter.set_scientific(True)
#formatter.set_powerlimits((-3,3))

fig_width_pt = 246.0*2 # Get this from LaTex using \the\columnwidth
inches_per_pt = 1.0/72.27
golden_mean = (np.sqrt(5)-1.0)/2.0
fig_width  = fig_width_pt*inches_per_pt # width in inches
fig_height = fig_width*golden_mean # height in inches
fig_size = [fig_width, fig_height]
params = {'axes.labelsize':10,
          'text.fontsize':6,
          'legend.fontsize':6,
          'xtick.labelsize':11.0,
          'ytick.labelsize':11.0,
          'figure.figsize':fig_size,
          'font.family': 'serif'}

pl.rcParams.update(params)
pl.clf()
pl.figure()
fig = pl.figure()
axes = pl.Axes(fig, [.2, .2, .7, .7])
fig.add_axes(axes)
axes.yaxis.set_major_formatter(formatter)

TotalVolume = 10.**9.

data = np.loadtxt('/disk1/mjw/HOD_MockRun/Data/SpectralDistortion/unitTheoryPk_monoxi_quadxi.dat')

for i in xrange(1, 5, 1):
  pl.loglog(data[:,0], np.abs(data[:, i]), label=str(pow(10., i-2)))

pl.xlabel(r'$r [h^{-1} Mpc]$')
# pl.ylabel(r'$r^2 \xi(r)$')

# pl.xlim(0.006, 1.0)
# pl.ylim(10.**1.,  7.*10.**4.)

#pl.clf()

pl.legend(loc=3)

pl.savefig('/disk1/mjw/HOD_MockRun/Plots/Windowfunc/31JulyOnwards/mixingmatrix_basisfn.pdf')

pl.clf()

data = np.loadtxt('/disk1/mjw/HOD_MockRun/Data/SpectralDistortion/2D_corrfn_multipoles_5.00_4Aug.dat')
pl.plot(data[:,0],   data[:,0]**2*data[:,1], 'r', label='measured')

data = np.loadtxt('/disk1/mjw/HOD_MockRun/Data/SpectralDistortion/unitTheory_xi_selectModes.dat')
pl.plot(data[:,0],   data[:,0]**2*data[:,1], 'k', label='stepwise P(k)')

data = np.loadtxt('/disk1/mjw/HOD_MockRun/Data/SpectralDistortion/fftlog_hodpk_NoRSD_4096_1.00e-10_1.00e+14_04Aug.dat')
pl.plot(data[:,0],   data[:,0]**2*data[:,1], 'c--', label='fft log')

pl.xscale('log')

pl.xlim(10.**-2.,   1000.)
pl.ylim(-20.,  50.)

pl.ylabel(r'r^2 \xi(r)')

pl.legend(loc=3)

pl.savefig('/disk1/mjw/HOD_MockRun/Plots/Windowfunc/31JulyOnwards/mixingmatrix_corrfn.pdf')
